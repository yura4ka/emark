datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  email       String     @unique @db.VarChar(50)
  password    String?
  isRequested Boolean    @default(false)
  isConfirmed Boolean    @default(false)
  groupId     Int?
  marks       Mark[]
  group       Group?     @relation(fields: [groupId], references: [id])
  subGroups   SubGroup[]
  seniorOf    Group?     @relation("Senior")
}

model Teacher {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  email       String  @unique @db.VarChar(50)
  password    String?
  isRequested Boolean @default(false)
  isConfirmed Boolean @default(false)
  isAdmin     Boolean @default(false)
  classes     Class[]
  handlerOf   Group?
  marks       Mark[]
}

model Faculty {
  id     Int     @id @default(autoincrement())
  title  String  @unique @db.VarChar(255)
  groups Group[]
}

model Group {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  handlerId Int?       @unique
  facultyId Int
  seniorId  Int?       @unique
  faculty   Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  handler   Teacher?   @relation(fields: [handlerId], references: [id])
  students  Student[]
  subGroups SubGroup[]
  senior    Student?   @relation("Senior", fields: [seniorId], references: [id])

  @@unique([facultyId, name])
}

model SubGroup {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  groupId  Int
  isFull   Boolean   @default(false)
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  students Student[]
  classes  Class[]
}

model Subject {
  id      Int     @id @default(autoincrement())
  title   String  @unique @db.VarChar(255)
  classes Class[]
}

model Class {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  subGroupId Int
  teacherId  Int?
  subjectId  Int
  subGroup   SubGroup @relation(fields: [subGroupId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  tasks      Task[]
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  date      DateTime @default(now())
  title     String?  @db.VarChar(255)
  maxScore  Int
  classId   Int
  marks     Mark[]
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Mark {
  id          Int       @id @default(autoincrement())
  taskId      Int
  teacherId   Int?
  studentId   Int
  score       Int
  dateCreated DateTime  @default(now())
  editedAt    DateTime? @updatedAt
  isNew       Boolean   @default(true)
  comment     String?
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teacher     Teacher?  @relation(fields: [teacherId], references: [id])
}
